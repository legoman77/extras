#!/usr/bin/env python3

import colors as c
import random

# Attacker's stats

print(c.clear)
print("Welcome to the Fire Emblem Battle Calculator!")
print("Please enter the attacker's stats.")
attacker_name = input("Attacker's name > ")
attacker_boss = input("Is this unit a boss? > ").lower()
attacker_class = input("Attacker's class > ").lower()
attacker_current_hp = int(input("Attacker's current HP > "))
attacker_max_hp = int(input("Attacker's max HP > "))
attacker_exp = int(input("Attacker's current EXP > "))
attacker_level = int(input("Attacker's level > "))
attacker_strength = int(input("Attacker's Strength > "))
attacker_magic = int(input("Attacker's Magic > "))
attacker_skill = int(input("Attacker's Skill > "))
attacker_speed = int(input("Attacker's Speed > "))
attacker_luck = int(input("Attacker's Luck > "))
attacker_defense = int(input("Attacker's Defense > "))
attacker_resistance = int(input("Attacker's Resistance > "))
attacker_weapon_type = input("Attacker's weapon type > ").lower()
attacker_weapon_uses = int(input("Attacker's weapon's remaining uses > "))
attacker_weapon_might = int(input("Attacker's weapon's Might > "))
attacker_weapon_hit = int(input("Attacker's weapon's Hit % > "))
attacker_weapon_crit = int(input("Attacker's weapon's Critical Rate > "))
attacker_weapon_range = input("Attacker's weapon's Range > ")
attacker_weapon_effect = input("Attacker's weapon's added effect(s) > ").lower()

# Attacker's attack type (physical or magical)

if attacker_weapon_type == "tome":
    attacker_strength = attacker_magic

# Defender's stats

print(c.clear)
print("Please enter the defender's stats.")
defender_name = input("Defender's name > ")
defender_boss = input("Is this unit a boss? > ").lower()
defender_class = input("Defender's class > ").lower()
defender_current_hp = int(input("Defender's current HP > "))
defender_max_hp = int(input("Defender's max HP > "))
defender_exp = int(input("Defender's current EXP > "))
defender_level = int(input("Defender's level > "))
defender_strength = int(input("Defender's Strength > "))
defender_magic = int(input("Defender's Magic > "))
defender_skill = int(input("Defender's Skill > "))
defender_speed = int(input("Defender's Speed > "))
defender_luck = int(input("Defender's Luck > "))
defender_defense = int(input("Defender's Defense > "))
defender_resistance = int(input("Defender's Resistance > "))
defender_weapon_type = input("Defender's weapon type > ").lower()
defender_weapon_uses = int(input("Defender's weapon's remaining uses > "))
defender_weapon_might = int(input("Defender's weapon's Might > "))
defender_weapon_hit = int(input("Defender's weapon's Hit % > "))
defender_weapon_crit = int(input("Defender's weapon's Critical Rate > "))
defender_weapon_range = input("Defender's weapon's Range > ")
defender_weapon_effect = input("Defender's weapon's added effect(s) > ").lower()

# Defender's attack type (physical or magical) and attacker's defense type (physical or magical)

if defender_weapon_type == "tome":
    defender_strength = defender_magic
    attacker_defense = attacker_resistance

# Defender's defense type (physical or magical)

if attacker_weapon_type == "tome":
    defender_defense = defender_resistance

# Attacker's experience-related formulas

    # Class Power

if attacker_class == "cleric" or attacker_class == "priest" or attacker_class == "Soldier" or attacker_class == "Troubadour" or attacker_class == "Thief" or attacker_class == "Dancer":
    attacker_class_power = 2
elif attacker_class == "Grima":
    attacker_class_power = 5
else:
    attacker_class_power = 3

    # Class Bonus A

if attacker_class == "Great Lord" or attacker_class == "Grandmaster" or attacker_class == "Paladin" or attacker_class == "General" or attacker_class == "Great Knight" or attacker_class == "Swordmaster" or attacker_class == "Trickster" or attacker_class == "Assassin" or attacker_class == "Berserker" or attacker_class == "Warrior" or attacker_class == "Hero" or attacker_class == "Sniper" or attacker_class == "Bow Knight" or attacker_class == "Sorcerer" or attacker_class == "Sage" or attacker_class == "Dark Knight" or attacker_class == "War Cleric" or attacker_class == "War Monk" or attacker_class == "Valkyrie" or attacker_class == "Falcon Knight" or attacker_class == "Dark Flier" or attacker_class == "Wyvern Lord" or attacker_class == "Griffon Rider" or attacker_class == "Entombed":
    attacker_class_bonus_a = 20
else:
    attacker_class_bonus_a = 0

    # Class Bonus B

if attacker_class == "Assassin" or attacker_class == "War Cleric" or attacker_class == "Valkyrie":
    attacker_class_bonus_b = 40
    print(attacker_class_bonus_b)
elif attacker_class == "Great Lord" or attacker_class == "Grandmaster" or attacker_class == "Paladin" or attacker_class == "General" or attacker_class == "Great Knight" or attacker_class == "Swordmaster" or attacker_class == "Trickster" or attacker_class == "Berserker" or attacker_class == "Warrior" or attacker_class == "Hero" or attacker_class == "Sniper" or attacker_class == "Bow Knight" or attacker_class == "Sorcerer" or attacker_class == "Sage" or attacker_class == "Dark Knight" or attacker_class == "War Monk" or attacker_class == "Valkyrie" or attacker_class == "Falcon Knight" or attacker_class == "Dark Flier" or attacker_class == "Wyvern Lord" or attacker_class == "Griffon Rider" or attacker_class == "Entombed":
    attacker_class_bonus_b = 60
    print(attacker_class_bonus_b)
else:
    attacker_class_bonus_b = 0
    print(attacker_class_bonus_b)

    # Boss Bonus

if attacker_boss == "Yes":
    attacker_boss_bonus = 40
    print(attacker_boss_bonus)
else:
    attacker_boss_bonus = 0
    print(attacker_boss_bonus)

# Battle Formulas

# Number of Attacks

if attacker_speed >= defender_speed + 5:
    attacker_attack_times = 2
    defender_attack_times = 1
elif defender_speed >= attacker_speed + 5:
    attacker_attack_times = 1
    defender_attack_times = 2
else:
    attacker_attack_times = 1
    defender_attack_times = 1

# Hit Rate

attacker_hit_rate = attacker_weapon_hit + attacker_skill * 2 + int(attacker_luck / 2)
defender_hit_rate = defender_weapon_hit + defender_skill * 2 + int(defender_luck / 2)

# Evade

attacker_evade = attacker_speed + int(attacker_luck / 2)
defender_evade = defender_speed + int(defender_luck / 2)

# Accuracy

attacker_accuracy = attacker_hit_rate - defender_evade
defender_accuracy = defender_hit_rate - defender_evade

# Attack Power

attacker_attack_power = attacker_strength + attacker_weapon_might
defender_attack_power = defender_strength + defender_weapon_might

# Defense Power

attacker_defense_power = attacker_defense
defender_defense_power = defender_defense

# Damage

attacker_damage = attacker_attack_power - defender_defense_power
defender_damage = defender_attack_power - attacker_defense_power

# Critical Rate

attacker_crit_rate = attacker_weapon_crit + int(attacker_skill / 2)
defender_crit_rate = defender_weapon_crit + int(defender_skill / 2)

# Critical Evade

attacker_crit_evade = attacker_luck
defender_crit_evade = defender_luck

# Critical Chance

attacker_crit_chance = attacker_crit_rate - defender_crit_evade
defender_crit_chance = defender_crit_rate - attacker_crit_evade

# Critical Damage

attacker_crit_damage = attacker_damage * 3
defender_crit_damage = defender_damage * 3

# Battle Preview

print("Battle Preview:")
print(attacker_name + ":")
print("Damage: " + str(attacker_damage) + "x" + str(attacker_attack_times))
print("Accuracy: " + str(attacker_accuracy) + "%")
print("Crit: " + str(attacker_crit_chance) + "%")
print(defender_name + ":")
print("Damage: " + str(defender_damage) + "x" + str(defender_attack_times))
print("Accuracy: " + str(defender_accuracy) + "%")
print("Crit: " + str(defender_crit_chance) + "%")

# Battle

battle_ready = input("Initiate the battle? > ")
if battle_ready == "yes":
    print(c.clear)

    # Attacker and defender attack once

    # Attacker's attack

    if attacker_attack_times == 1 and defender_attack_times == 1:
        
        # Attacker's crit roll

        attacker_crit_roll = random.randint(1,100)

        # Attacker gets a crit

        if attacker_crit_roll <= attacker_crit_chance:
            print(attacker_name + " got a critical hit!")
            attacker_hit_roll = random.randint(1,100)
            
            # Attacker hits crit

            if attacker_hit_roll <= attacker_accuracy:
                defender_current_hp = defender_current_hp - attacker_crit_damage
                attacker_weapon_uses -= 1
                print(defender_name + " took " + str(attacker_crit_damage) + " damage!")
                if attacker_weapon_uses <= 0:
                    print(attacker_name + "'s weapon broke!")
            
            # Attacker misses crit

            else:
                print(attacker_name + " missed!")
        
        # Attacker doesn't get a crit

        else:
            attacker_hit_roll = random.randint(1,100)
            
            # Attacker hits

            if attacker_hit_roll <= attacker_accuracy:
                defender_current_hp = defender_current_hp - attacker_damage
                print(attacker_name + " attacks!")
                print(defender_name + " took " + str(attacker_damage) + " damage!")
                attacker_weapon_uses -= 1
                if attacker_weapon_uses <= 0:
                    print(attacker_name + "'s weapon broke!")
            
            # Attacker misses

            else:
                print(attacker_name + " missed!")

        # Defender's attack

        if defender_current_hp > 0:
            
            # Defender's crit roll

            defender_crit_roll = random.randint(1,100)

            # Defender gets a crit

            if defender_crit_roll <= defender_crit_chance:
                print(defender_name + " got a critical hit!")
                defender_hit_roll = random.randint(1,100)

                # Defender hits crit

                if defender_hit_roll <= defender_accuracy:
                    attacker_current_hp = attacker_current_hp - defender_crit_damage
                    print(attacker_name + " took " + str(defender_crit_damage) + " damage!")
                    defender_weapon_uses -= 1
                    if defender_weapon_uses <= 0:
                        print(defender_name + "'s weapon broke!")

                # Defender misses crit

                else:
                    print(defender_name + " missed!")

            # Defender doesn't get a crit

            else:
                defender_hit_roll = random.randint(1,100)

                # Defender hits attack

                if defender_hit_roll <= defender_accuracy:
                    attacker_current_hp = attacker_current_hp - defender_damage
                    print(defender_name + " attacks!")
                    print(attacker_name + " took " + str(defender_damage) + " damage!")
                    defender_weapon_uses -= 1
                    if defender_weapon_uses <= 0:
                        print(defender_name + "'s weapon broke!")

                # Defender misses attack
                
                else:
                    print(defender_name + " missed!")
        
        # Defender is dead
        
        else:
            print(defender_name + " has died.")
            print(attacker_name + " wins!")

        # Attacker is dead

        if attacker_current_hp <= 0:
            print(attacker_name + " has died.")
            print(defender_name + " wins!")

        # Attacker's remaining HP

        print(attacker_name + " has " + str(attacker_current_hp) + " HP remaining.")
        
        # Defender's remaining HP
        
        print(defender_name + " has " + str(defender_current_hp) + " HP remaining.")
        
        # Attacker's weapon's remaining uses

        if attacker_weapon_uses > 1 or attacker_weapon_uses < 1:
            print(attacker_name + "'s weapon has " + str(attacker_weapon_uses) + " uses remaining.")
        else: 
            print(attacker_name + "'s weapon has " + str(attacker_weapon_uses) + " use remaining.")
        
        # Defender's weapon's remaining uses

        if defender_weapon_uses > 1 or defender_weapon_uses < 1:    
            print(defender_name + "'s weapon has " + str(defender_weapon_uses) + " uses remaining.")
        else:
            print(defender_name + "'s weapon has " + str(defender_weapon_uses) + " use remaining.")
        
        # Experience Points

        # Attacker

        if attacker_current_hp > 0:
            if attacker_hit_roll <= attacker_accuracy:
                pass
            else:
                print(attacker_name + " gained 0 experience points.")

